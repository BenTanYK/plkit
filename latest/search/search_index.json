{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"plkit <p>A package for automating EUBC PlayerLayer kit orders</p> <p> </p> <p>The <code>plkit</code> framework ...</p>"},{"location":"#installation","title":"Installation","text":"<p>This package can be installed using <code>conda</code> (or <code>mamba</code>, a faster version of <code>conda</code>):</p> <pre><code>mamba install -c conda-forge plkit\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started, see the documentation.</p>"},{"location":"development/","title":"Development","text":"<p>To create a development environment, you must have <code>mamba</code> installed.</p> <p>A development conda environment can be created and activated with:</p> <pre><code>make env\nconda activate plkit\n</code></pre> <p>To format the codebase:</p> <pre><code>make format\n</code></pre> <p>To run the unit tests:</p> <pre><code>make test\n</code></pre> <p>To serve the documentation locally:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"reference/","title":"Index","text":""},{"location":"reference/#plkit","title":"plkit","text":"<p>A package for automating EUBC PlayerLayer kit orders</p> <p>Modules:</p> <ul> <li> <code>generate_order_form</code>           \u2013            <p>Functions and classes for generating order forms given order information</p> </li> <li> <code>read_orders</code>           \u2013            <p>Functions and classes for reading in order information from the excel sheet</p> </li> <li> <code>validate</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>read_order</code>             \u2013              <p>Obtain the order information for a specific person</p> </li> <li> <code>extract_orders</code>             \u2013              <p>Read in the order response form as a pandas DataFrame.</p> </li> <li> <code>generate_product_order</code>             \u2013              <p>Generate a DataFrame of product-specific order information,</p> </li> <li> <code>generate_product_personalisations</code>             \u2013              <p>Generate a DataFrame of product-specific order personalisations,</p> </li> <li> <code>assert_order_count</code>             \u2013              <p>Assert that the item count in the DataFrame of</p> </li> <li> <code>assert_back_personalisations</code>             \u2013              <p>Assert that the back name personalisations count in the</p> </li> <li> <code>assert_sleeve_personalisations</code>             \u2013              <p>Assert that the sleeve name personalisations count in the</p> </li> </ul>"},{"location":"reference/#plkit.read_order","title":"read_order","text":"<pre><code>read_order(\n    df_orders: DataFrame, name: str, email: str = None\n)\n</code></pre> <p>Obtain the order information for a specific person</p>"},{"location":"reference/#plkit.read_order--parameters","title":"Parameters","text":"<p>df_orders: pd.DataFrame     The pandas DataFrame containing all the order information name : str     The name of the person placing the order email : str, optional     The email address of the person placing the order</p>"},{"location":"reference/#plkit.read_order--returns","title":"Returns","text":"<p>order : class     Instance of the Order class for the specified name</p> Source code in <code>plkit/read_orders.py</code> <pre><code>def read_order(df_orders: _pd.DataFrame, name: str, email: str = None):\n    \"\"\"\n    Obtain the order information for a specific person\n\n    Parameters\n    ----------\n    df_orders: pd.DataFrame\n        The pandas DataFrame containing all the order information\n    name : str\n        The name of the person placing the order\n    email : str, optional\n        The email address of the person placing the order\n\n    Returns\n    -------\n    order : class\n        Instance of the Order class for the specified name\n    \"\"\"\n    name = name.strip()\n\n    # Check that names column exists\n    if \"Name\" not in df_orders.columns:\n        raise LookupError(\"Name column not found in input DataFrame\")\n    else:\n        names = df_orders[\"Name\"].to_list()\n\n    # Check that email column exists\n    if \"Email\" not in df_orders.columns:\n        raise LookupError(\"Email column not found in input DataFrame\")\n\n    # Extract email if not specified\n    if isinstance(email, str):\n        email = email.strip()\n    else:\n        email = df_orders.loc[df_orders[\"Name\"] == name, \"Email\"].iloc[0]\n\n    name_count = names.count(name)\n\n    if name_count == 0:\n        raise LookupError(f\"Name {name} not found!\")\n    elif name_count == 1:\n        idx = df_orders[\n            df_orders[\"Name\"] == name\n        ].index  # Only use email unless if are two identical names\n    else:\n        idx = df_orders[\n            (df_orders[\"Name\"] == name) &amp; (df_orders[\"Email\"] == email)\n        ].index\n\n    # Initialise class\n    order_info = Order(\n        email=email,\n        name=name,\n        items=_extract_items(df_orders, idx),\n        sizings=_extract_sizings(df_orders, idx),\n        back_names=_extract_back_names(df_orders, idx),\n        sleeve_names=_extract_sleeve_names(df_orders, idx),\n    )\n\n    return order_info\n</code></pre>"},{"location":"reference/#plkit.extract_orders","title":"extract_orders","text":"<pre><code>extract_orders(\n    filename: str = \"responses.xlsx\",\n) -&gt; DataFrame\n</code></pre> <p>Read in the order response form as a pandas DataFrame.</p>"},{"location":"reference/#plkit.extract_orders--parameters","title":"Parameters","text":"<p>filename : str, optional     The name of the responses form saved from Microsoft forms</p>"},{"location":"reference/#plkit.extract_orders--returns","title":"Returns","text":"<p>df_orders : pd.DataFrame     The order details converted to a pandas DataFrame</p> Source code in <code>plkit/read_orders.py</code> <pre><code>def extract_orders(filename: str = \"responses.xlsx\") -&gt; _pd.DataFrame:\n    \"\"\"\n    Read in the order response form as a pandas DataFrame.\n\n    Parameters\n    ----------\n    filename : str, optional\n        The name of the responses form saved from Microsoft forms\n\n    Returns\n    -------\n    df_orders : pd.DataFrame\n        The order details converted to a pandas DataFrame\n    \"\"\"\n\n    if not filename.endswith(\".xlsx\"):\n        raise ValueError(\"Input must be an Excel File\")\n\n    if not _os.path.isfile(filename):\n        raise FileNotFoundError(f\"File {filename} does not exist\")\n\n    try:\n        df_orders = _pd.read_excel(filename)\n    except _pd.errors.EmptyDataError as e:\n        raise _pd.errors.EmptyDataError(f\"The file {filename} is empty\") from e\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\") from e\n\n    # Clean hidden characters\n    df_orders['Name'] = df_orders['Name'].apply(_clean_string)\n    df_orders['Email'] = df_orders['Email'].apply(_clean_string)\n\n    for number in ['First', 'Second', 'Third', 'Fourth', 'Fifth']:\n        column_name = f'{number} kit item'\n        df_orders[column_name] = df_orders[column_name].apply(_clean_string)\n        column_name = f'{number} item - name personalisation for back (optional)'\n        df_orders[column_name] = df_orders[column_name].apply(_clean_string)\n        column_name = (f'{number} item - personalisation for initials (optional, '\n        'max two letters)')\n        df_orders[column_name] = df_orders[column_name].apply(_clean_string)\n\n    for number in ['first', 'second', 'third', 'fourth', 'fifth']:\n        column_name = (f\"Sizing for {number} kit item (note that for women's tee, \"\n        \"XS=size 6, S=size 8, ... , 4XL=20)\"\n        )\n        df_orders[column_name] = df_orders[column_name].apply(_clean_string)\n\n    return df_orders\n</code></pre>"},{"location":"reference/#plkit.generate_product_order","title":"generate_product_order","text":"<pre><code>generate_product_order(df_orders: DataFrame) -&gt; DataFrame\n</code></pre> <p>Generate a DataFrame of product-specific order information, given a DataFrame of orders</p>"},{"location":"reference/#plkit.generate_product_order--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame</p>"},{"location":"reference/#plkit.generate_product_order--returns","title":"Returns","text":"<p>df_products: _pd.DataFrame     Full order details for every product,     completed with the orders contained in df_orders</p> Source code in <code>plkit/generate_order_form.py</code> <pre><code>def generate_product_order(df_orders: _pd.DataFrame) -&gt; _pd.DataFrame:\n    \"\"\"\n    Generate a DataFrame of product-specific order information,\n    given a DataFrame of orders\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n\n    Returns\n    -------\n    df_products: _pd.DataFrame\n        Full order details for every product,\n        completed with the orders contained in df_orders\n    \"\"\"\n\n    # List of all products - women's sizing is different\n    items = [\n        \"Unisex EcoLayer Hoodie\",\n        \"Unisex EcoLayer Hoodie - 1 Personalisation\",\n        \"Unisex EcoLayer Hoodie - 2 Personalisations\",\n        \"Unisex Shield Performance Sweatshirt\",\n        \"Unisex Shield Performance Sweatshirt - 1 Personalisation\",\n        \"Unisex Shield Performance Sweatshirt - 2 Personalisations\",\n        \"Men's EcoLayer Tee (Navy)\",\n        \"Men's EcoLayer Tee - 1 Personalisation (Navy)\",\n        \"Men's EcoLayer Tee - 2 Personalisations (Navy)\",\n        \"Men's EcoLayer Tee (Forest)\",\n        \"Men's EcoLayer Tee - 1 Personalisation (Forest)\",\n        \"Men's EcoLayer Tee - 2 Personalisations (Forest)\",\n        \"Women's EcoLayer Tee (Navy)\",\n        \"Women's EcoLayer Tee - 1 Personalisation (Navy)\",\n        \"Women's EcoLayer Tee - 2 Personalisations (Navy)\",\n        \"Women's EcoLayer Tee (Forest)\",\n        \"Women's EcoLayer Tee - 1 Personalisation (Forest)\",\n        \"Women's EcoLayer Tee - 2 Personalisations (Forest)\",\n    ]\n\n    # Names of all people who submitted an order\n    names = df_orders[\"Name\"].to_list()\n\n    # Empty df to store product order info\n    columns = [\n        \"Product Name\",\n        \"Colour\",\n        \"Total Quantity\",\n        \"XS\",\n        \"S\",\n        \"M\",\n        \"L\",\n        \"XL\",\n        \"2XL\",\n        \"3XL\",\n        \"4XL\",\n        \"5XL\",\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        \"Unit Price (\u00a3)\",\n        \"Total Price (\u00a3)\",\n    ]\n    df_products = _pd.DataFrame(columns=columns)\n\n    for item in items:\n        product = Product(item)  # Initialise empty class\n\n        for name in names:  # Populate product with the info from all orders\n            order = read_order(df_orders, name)\n            order.identify_products()\n            product.update_product(order)\n\n        df_products = _update_df_products(df_products, product)\n\n    # Add total pricing row\n    count_all_items = _np.sum(df_products[\"Total Quantity\"].to_numpy())\n    total_price = _np.sum(df_products[\"Total Price (\u00a3)\"].to_numpy())\n\n    new_row = [_np.nan] * len(columns)\n    new_row[2] = count_all_items\n    new_row[-1] = total_price\n    df_products.loc[len(df_products)] = new_row\n    df_products.iloc[-1, -2] = \"Total\"  # Add label for total\n\n    # Add label for club name\n    new_row = [_np.nan] * len(columns)\n    df_products.loc[len(df_products)] = new_row\n    df_products.iloc[-1, 1] = \"Club Name\"\n    df_products.iloc[-1, 2] = \"Badminton\"\n\n    return df_products\n</code></pre>"},{"location":"reference/#plkit.generate_product_personalisations","title":"generate_product_personalisations","text":"<pre><code>generate_product_personalisations(\n    df_orders: DataFrame,\n) -&gt; DataFrame\n</code></pre> <p>Generate a DataFrame of product-specific order personalisations, given a DataFrame of orders</p>"},{"location":"reference/#plkit.generate_product_personalisations--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame</p>"},{"location":"reference/#plkit.generate_product_personalisations--returns","title":"Returns","text":"<p>df_personal: _pd.DataFrame     Full personalisation details for every product,     completed with the orders contained in df_orders</p> Source code in <code>plkit/generate_order_form.py</code> <pre><code>def generate_product_personalisations(df_orders: _pd.DataFrame) -&gt; _pd.DataFrame:\n    \"\"\"\n    Generate a DataFrame of product-specific order personalisations,\n    given a DataFrame of orders\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n\n    Returns\n    -------\n    df_personal: _pd.DataFrame\n        Full personalisation details for every product,\n        completed with the orders contained in df_orders\n    \"\"\"\n\n    womens_sizing = {\n        \"XS\": 6,\n        \"S\": 8,\n        \"M\": 10,\n        \"L\": 12,\n        \"XL\": 14,\n        \"2XL\": 16,\n        \"3XL\": 18,\n        \"4XL\": 20,\n        \"5XL\": 22,\n    }\n\n    # Names of all people who submitted an order\n    names = df_orders[\"Name\"].to_list()\n\n    # Empty df to store product order info\n    columns = [\n        \"Product Name\",\n        \"Size\",\n        \"Colour\",\n        \"Initials (sleeve personalisation)\",\n        \"Name (back personalisation)\",\n    ]\n\n    df_personal = _pd.DataFrame(columns=columns)\n\n    for name in names:  # Populate product with the info from all orders\n        order = read_order(df_orders, name)\n        order.identify_products()\n\n        for n in range(len(order.items)):\n            product_name = order.products[n]\n\n            if isinstance(product_name, str):\n                product_name = product_name.strip()\n                sizing = order.sizings[n]\n\n                new_row = {\n                    \"Product Name\": product_name,\n                    \"Size\": womens_sizing.get(sizing, sizing)\n                    if \"Women's\" in product_name\n                    else sizing,\n                    \"Colour\": \"Forest\" if \"Forest\" in product_name else \"Navy\",\n                    \"Initials (sleeve personalisation)\": order.sleeve_names[n],\n                    \"Name (back personalisation)\": order.back_names[n],\n                }\n\n                # Only add column for personalised item\n                if isinstance(order.sleeve_names[n], str) or isinstance(\n                    order.back_names[n], str\n                ):\n                    df_personal = _pd.concat(\n                        [df_personal, _pd.DataFrame([new_row])], ignore_index=True\n                    )\n\n    return df_personal\n</code></pre>"},{"location":"reference/#plkit.assert_order_count","title":"assert_order_count","text":"<pre><code>assert_order_count(\n    df_orders: DataFrame, df_products: DataFrame\n) -&gt; None\n</code></pre> <p>Assert that the item count in the DataFrame of products to order matches the total number of items in the initial order.</p>"},{"location":"reference/#plkit.assert_order_count--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame df_products: _pd.DataFrame     Full order details for every product,     completed with the orders contained in df_orders</p>"},{"location":"reference/#plkit.assert_order_count--returns","title":"Returns","text":"<p>None</p> Source code in <code>plkit/validate/tests.py</code> <pre><code>def assert_order_count(df_orders: _pd.DataFrame, df_products: _pd.DataFrame) -&gt; None:\n    \"\"\"\n    Assert that the item count in the DataFrame of\n    products to order matches\n    the total number of items in the initial order.\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n    df_products: _pd.DataFrame\n        Full order details for every product,\n        completed with the orders contained in df_orders\n\n    Returns\n    -------\n    None\n    \"\"\"\n    initial_count = int(_count_initial_order(df_orders))\n    processed_count = int(_count_processed_order(df_products))\n\n    assert initial_count == processed_count\n</code></pre>"},{"location":"reference/#plkit.assert_back_personalisations","title":"assert_back_personalisations","text":"<pre><code>assert_back_personalisations(\n    df_orders: DataFrame, df_personal: DataFrame\n) -&gt; None\n</code></pre> <p>Assert that the back name personalisations count in the DataFrame of products to order matches the total number of personalisations in the initial order.</p>"},{"location":"reference/#plkit.assert_back_personalisations--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame df_personal: __pd.DataFrame     Full personalisation details for every product,     completed with the orders contained in df_orders</p>"},{"location":"reference/#plkit.assert_back_personalisations--returns","title":"Returns","text":"<p>None</p> Source code in <code>plkit/validate/tests.py</code> <pre><code>def assert_back_personalisations(\n    df_orders: _pd.DataFrame, df_personal: _pd.DataFrame\n) -&gt; None:\n    \"\"\"\n    Assert that the back name personalisations count in the\n    DataFrame of products to order matches\n    the total number of personalisations in the initial order.\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n    df_personal: __pd.DataFrame\n        Full personalisation details for every product,\n        completed with the orders contained in df_orders\n\n    Returns\n    -------\n    None\n    \"\"\"\n    initial_count = _count_initial_back_personalisations(df_orders)\n    processed_count = _count_processed_back_personalisations(df_personal)\n\n    assert initial_count == processed_count\n</code></pre>"},{"location":"reference/#plkit.assert_sleeve_personalisations","title":"assert_sleeve_personalisations","text":"<pre><code>assert_sleeve_personalisations(\n    df_orders: DataFrame, df_personal: DataFrame\n) -&gt; None\n</code></pre> <p>Assert that the sleeve name personalisations count in the DataFrame of products to order matches the total number of personalisations in the initial order.</p>"},{"location":"reference/#plkit.assert_sleeve_personalisations--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame df_personal: __pd.DataFrame     Full personalisation details for every product,     completed with the orders contained in df_orders</p>"},{"location":"reference/#plkit.assert_sleeve_personalisations--returns","title":"Returns","text":"<p>None</p> Source code in <code>plkit/validate/tests.py</code> <pre><code>def assert_sleeve_personalisations(\n    df_orders: _pd.DataFrame, df_personal: _pd.DataFrame\n) -&gt; None:\n    \"\"\"\n    Assert that the sleeve name personalisations count in the\n    DataFrame of products to order matches\n    the total number of personalisations in the initial order.\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n    df_personal: __pd.DataFrame\n        Full personalisation details for every product,\n        completed with the orders contained in df_orders\n\n    Returns\n    -------\n    None\n    \"\"\"\n    initial_count = _count_initial_sleeve_personalisations(df_orders)\n    processed_count = _count_processed_sleeve_personalisations(df_personal)\n\n    assert initial_count == processed_count\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>plkit<ul> <li>generate_order_form</li> <li>read_orders</li> <li>validate</li> </ul> </li> </ul>"},{"location":"reference/generate_order_form/","title":"generate_order_form","text":""},{"location":"reference/generate_order_form/#plkit.generate_order_form","title":"generate_order_form","text":"<p>Functions and classes for generating order forms given order information packaged as a DataFrame extracted using plkit.extract_orders()</p> <p>Classes:</p> <ul> <li> <code>Product</code>           \u2013            <p>Class to hold information about a specific product</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>generate_product_order</code>             \u2013              <p>Generate a DataFrame of product-specific order information,</p> </li> <li> <code>generate_product_personalisations</code>             \u2013              <p>Generate a DataFrame of product-specific order personalisations,</p> </li> </ul>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product","title":"Product","text":"<pre><code>Product(name: str)\n</code></pre> <p>Class to hold information about a specific product</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product--parameters","title":"Parameters","text":"<p>name : str     Name of the particular product</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product--returns","title":"Returns","text":"<p>None</p> <p>Methods:</p> <ul> <li> <code>update_count</code>             \u2013              <p>Update the product count given a specific sizing</p> </li> <li> <code>update_product</code>             \u2013              <p>Update the product specifications given a specific order</p> </li> </ul> Source code in <code>plkit/generate_order_form.py</code> <pre><code>def __init__(self, name: str) -&gt; None:\n    \"\"\"\n    Initialise an empty instance of the product class\n\n    Parameters\n    ----------\n    name : str\n        Name of the particular product\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    # Internal dictionary to store the pricing of individual items\n    self.pricing = {\n        \"Unisex EcoLayer Hoodie\": 32.0,  # pounds\n        \"Unisex EcoLayer Hoodie - 1 Personalisation\": 35.5,\n        \"Unisex EcoLayer Hoodie - 2 Personalisations\": 39.00,\n        \"Unisex Shield Performance Sweatshirt\": 30.0,\n        \"Unisex Shield Performance Sweatshirt - 1 Personalisation\": 33.5,\n        \"Unisex Shield Performance Sweatshirt - 2 Personalisations\": 37.0,\n        \"Men's EcoLayer Tee (Navy)\": 15.5,\n        \"Men's EcoLayer Tee - 1 Personalisation (Navy)\": 19.0,\n        \"Men's EcoLayer Tee - 2 Personalisations (Navy)\": 22.5,\n        \"Men's EcoLayer Tee (Forest)\": 15.5,\n        \"Men's EcoLayer Tee - 1 Personalisation (Forest)\": 19.0,\n        \"Men's EcoLayer Tee - 2 Personalisations (Forest)\": 22.5,\n        \"Women's EcoLayer Tee (Navy)\": 15.5,\n        \"Women's EcoLayer Tee - 1 Personalisation (Navy)\": 19.0,\n        \"Women's EcoLayer Tee - 2 Personalisations (Navy)\": 22.5,\n        \"Women's EcoLayer Tee (Forest)\": 15.5,\n        \"Women's EcoLayer Tee - 1 Personalisation (Forest)\": 19.0,\n        \"Women's EcoLayer Tee - 2 Personalisations (Forest)\": 22.5,\n    }\n\n    if name not in self.pricing:\n        raise LookupError(f\"Item {name} not found.\")\n\n    self.name = name\n    self.colour = \"Forest\" if \"Forest\" in self.name else \"Navy\"\n    self.sizings = {\n        \"XS\": 0,\n        \"S\": 0,\n        \"M\": 0,\n        \"L\": 0,\n        \"XL\": 0,\n        \"2XL\": 0,\n        \"3XL\": 0,\n        \"4XL\": 0,\n        \"5XL\": 0,\n    }\n    self.total_quantity = 0\n    self.unit_price = self.pricing[name]\n    self.total_price = 0\n</code></pre>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product.update_count","title":"update_count","text":"<pre><code>update_count(sizing, quantity=1) -&gt; None\n</code></pre> <p>Update the product count given a specific sizing</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product.update_count--parameters","title":"Parameters","text":"<p>sizing : str     Sizing for which to update the count quantity : int, optional     Item count to update</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product.update_count--returns","title":"Returns","text":"<p>None</p> Source code in <code>plkit/generate_order_form.py</code> <pre><code>def update_count(self, sizing, quantity=1) -&gt; None:\n    \"\"\"\n    Update the product count given a specific sizing\n\n    Parameters\n    ----------\n    sizing : str\n        Sizing for which to update the count\n    quantity : int, optional\n        Item count to update\n\n    Returns\n    -------\n    None\n    \"\"\"\n    if sizing not in self.sizings:\n        raise LookupError(\n            f\"\"\"Sizing {sizing} not found,\n            select a sizing from {list(self.sizings.keys())}\"\"\"\n        )\n\n    self.sizings[sizing] += quantity\n    self.total_quantity += quantity\n    self.total_price = self.unit_price * self.total_quantity\n</code></pre>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product.update_product","title":"update_product","text":"<pre><code>update_product(order) -&gt; None\n</code></pre> <p>Update the product specifications given a specific order</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product.update_product--parameters","title":"Parameters","text":"<p>order : class     Instance of the Order class which is used to update the product information</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.Product.update_product--returns","title":"Returns","text":"<p>None</p> Source code in <code>plkit/generate_order_form.py</code> <pre><code>def update_product(self, order) -&gt; None:\n    \"\"\"\n    Update the product specifications given a specific order\n\n    Parameters\n    ----------\n    order : class\n        Instance of the Order class which is used to update the product information\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    # Update product names\n    order.identify_products()\n\n    # Loop over every item stored in order and update where appropriate\n    for n in range(len(order.items)):\n        product_name = order.products[n]\n        sizing = order.sizings[n]\n\n        # Check for valid product name and sizing\n        if isinstance(product_name, str) and product_name.strip() == self.name:\n            if isinstance(sizing, str) and sizing.strip() in self.sizings:\n                self.update_count(sizing.strip())\n</code></pre>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.generate_product_order","title":"generate_product_order","text":"<pre><code>generate_product_order(df_orders: DataFrame) -&gt; DataFrame\n</code></pre> <p>Generate a DataFrame of product-specific order information, given a DataFrame of orders</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.generate_product_order--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.generate_product_order--returns","title":"Returns","text":"<p>df_products: _pd.DataFrame     Full order details for every product,     completed with the orders contained in df_orders</p> Source code in <code>plkit/generate_order_form.py</code> <pre><code>def generate_product_order(df_orders: _pd.DataFrame) -&gt; _pd.DataFrame:\n    \"\"\"\n    Generate a DataFrame of product-specific order information,\n    given a DataFrame of orders\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n\n    Returns\n    -------\n    df_products: _pd.DataFrame\n        Full order details for every product,\n        completed with the orders contained in df_orders\n    \"\"\"\n\n    # List of all products - women's sizing is different\n    items = [\n        \"Unisex EcoLayer Hoodie\",\n        \"Unisex EcoLayer Hoodie - 1 Personalisation\",\n        \"Unisex EcoLayer Hoodie - 2 Personalisations\",\n        \"Unisex Shield Performance Sweatshirt\",\n        \"Unisex Shield Performance Sweatshirt - 1 Personalisation\",\n        \"Unisex Shield Performance Sweatshirt - 2 Personalisations\",\n        \"Men's EcoLayer Tee (Navy)\",\n        \"Men's EcoLayer Tee - 1 Personalisation (Navy)\",\n        \"Men's EcoLayer Tee - 2 Personalisations (Navy)\",\n        \"Men's EcoLayer Tee (Forest)\",\n        \"Men's EcoLayer Tee - 1 Personalisation (Forest)\",\n        \"Men's EcoLayer Tee - 2 Personalisations (Forest)\",\n        \"Women's EcoLayer Tee (Navy)\",\n        \"Women's EcoLayer Tee - 1 Personalisation (Navy)\",\n        \"Women's EcoLayer Tee - 2 Personalisations (Navy)\",\n        \"Women's EcoLayer Tee (Forest)\",\n        \"Women's EcoLayer Tee - 1 Personalisation (Forest)\",\n        \"Women's EcoLayer Tee - 2 Personalisations (Forest)\",\n    ]\n\n    # Names of all people who submitted an order\n    names = df_orders[\"Name\"].to_list()\n\n    # Empty df to store product order info\n    columns = [\n        \"Product Name\",\n        \"Colour\",\n        \"Total Quantity\",\n        \"XS\",\n        \"S\",\n        \"M\",\n        \"L\",\n        \"XL\",\n        \"2XL\",\n        \"3XL\",\n        \"4XL\",\n        \"5XL\",\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        \"Unit Price (\u00a3)\",\n        \"Total Price (\u00a3)\",\n    ]\n    df_products = _pd.DataFrame(columns=columns)\n\n    for item in items:\n        product = Product(item)  # Initialise empty class\n\n        for name in names:  # Populate product with the info from all orders\n            order = read_order(df_orders, name)\n            order.identify_products()\n            product.update_product(order)\n\n        df_products = _update_df_products(df_products, product)\n\n    # Add total pricing row\n    count_all_items = _np.sum(df_products[\"Total Quantity\"].to_numpy())\n    total_price = _np.sum(df_products[\"Total Price (\u00a3)\"].to_numpy())\n\n    new_row = [_np.nan] * len(columns)\n    new_row[2] = count_all_items\n    new_row[-1] = total_price\n    df_products.loc[len(df_products)] = new_row\n    df_products.iloc[-1, -2] = \"Total\"  # Add label for total\n\n    # Add label for club name\n    new_row = [_np.nan] * len(columns)\n    df_products.loc[len(df_products)] = new_row\n    df_products.iloc[-1, 1] = \"Club Name\"\n    df_products.iloc[-1, 2] = \"Badminton\"\n\n    return df_products\n</code></pre>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.generate_product_personalisations","title":"generate_product_personalisations","text":"<pre><code>generate_product_personalisations(\n    df_orders: DataFrame,\n) -&gt; DataFrame\n</code></pre> <p>Generate a DataFrame of product-specific order personalisations, given a DataFrame of orders</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.generate_product_personalisations--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame</p>"},{"location":"reference/generate_order_form/#plkit.generate_order_form.generate_product_personalisations--returns","title":"Returns","text":"<p>df_personal: _pd.DataFrame     Full personalisation details for every product,     completed with the orders contained in df_orders</p> Source code in <code>plkit/generate_order_form.py</code> <pre><code>def generate_product_personalisations(df_orders: _pd.DataFrame) -&gt; _pd.DataFrame:\n    \"\"\"\n    Generate a DataFrame of product-specific order personalisations,\n    given a DataFrame of orders\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n\n    Returns\n    -------\n    df_personal: _pd.DataFrame\n        Full personalisation details for every product,\n        completed with the orders contained in df_orders\n    \"\"\"\n\n    womens_sizing = {\n        \"XS\": 6,\n        \"S\": 8,\n        \"M\": 10,\n        \"L\": 12,\n        \"XL\": 14,\n        \"2XL\": 16,\n        \"3XL\": 18,\n        \"4XL\": 20,\n        \"5XL\": 22,\n    }\n\n    # Names of all people who submitted an order\n    names = df_orders[\"Name\"].to_list()\n\n    # Empty df to store product order info\n    columns = [\n        \"Product Name\",\n        \"Size\",\n        \"Colour\",\n        \"Initials (sleeve personalisation)\",\n        \"Name (back personalisation)\",\n    ]\n\n    df_personal = _pd.DataFrame(columns=columns)\n\n    for name in names:  # Populate product with the info from all orders\n        order = read_order(df_orders, name)\n        order.identify_products()\n\n        for n in range(len(order.items)):\n            product_name = order.products[n]\n\n            if isinstance(product_name, str):\n                product_name = product_name.strip()\n                sizing = order.sizings[n]\n\n                new_row = {\n                    \"Product Name\": product_name,\n                    \"Size\": womens_sizing.get(sizing, sizing)\n                    if \"Women's\" in product_name\n                    else sizing,\n                    \"Colour\": \"Forest\" if \"Forest\" in product_name else \"Navy\",\n                    \"Initials (sleeve personalisation)\": order.sleeve_names[n],\n                    \"Name (back personalisation)\": order.back_names[n],\n                }\n\n                # Only add column for personalised item\n                if isinstance(order.sleeve_names[n], str) or isinstance(\n                    order.back_names[n], str\n                ):\n                    df_personal = _pd.concat(\n                        [df_personal, _pd.DataFrame([new_row])], ignore_index=True\n                    )\n\n    return df_personal\n</code></pre>"},{"location":"reference/read_orders/","title":"read_orders","text":""},{"location":"reference/read_orders/#plkit.read_orders","title":"read_orders","text":"<p>Functions and classes for reading in order information from the excel sheet containing responses from the Microsoft form</p> <p>Classes:</p> <ul> <li> <code>Order</code>           \u2013            <p>Class to hold information about a single specific order</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>extract_orders</code>             \u2013              <p>Read in the order response form as a pandas DataFrame.</p> </li> <li> <code>read_order</code>             \u2013              <p>Obtain the order information for a specific person</p> </li> </ul>"},{"location":"reference/read_orders/#plkit.read_orders.Order","title":"Order","text":"<pre><code>Order(\n    email: str,\n    name: str,\n    items: List[str],\n    sizings: List[str],\n    back_names: List[str],\n    sleeve_names: List[str],\n)\n</code></pre> <p>Class to hold information about a single specific order</p>"},{"location":"reference/read_orders/#plkit.read_orders.Order--parameters","title":"Parameters","text":"<p>email : str     Email address of person placing the order name : str     Name of the person placing the order items : list     Ordered items sizings : list     Sizing information (XS, S, .., 4XL) back_names : list     Personalisations to be printed on the back of the item sleeve_names : list     Initials to be printed on the sleeve</p>"},{"location":"reference/read_orders/#plkit.read_orders.Order--returns","title":"Returns","text":"<p>None</p> <p>Methods:</p> <ul> <li> <code>identify_products</code>             \u2013              <p>Assign a product name to each item in the order</p> </li> </ul> Source code in <code>plkit/read_orders.py</code> <pre><code>def __init__(\n    self,\n    email: str,\n    name: str,\n    items: _List[str],\n    sizings: _List[str],\n    back_names: _List[str],\n    sleeve_names: _List[str],\n) -&gt; None:\n    \"\"\"\n    Initialise the Order class\n\n    Parameters\n    ----------\n    email : str\n        Email address of person placing the order\n    name : str\n        Name of the person placing the order\n    items : list\n        Ordered items\n    sizings : list\n        Sizing information (XS, S, .., 4XL)\n    back_names : list\n        Personalisations to be printed on the back of the item\n    sleeve_names : list\n        Initials to be printed on the sleeve\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.email = email\n    self.name = name\n    self.items = items\n    self.sizings = sizings\n    self.back_names = back_names\n    self.sleeve_names = sleeve_names\n    self.products = [\n        _np.nan\n    ] * 5  # Product information is empty, extract with function identify_products()\n\n    if not (len(items) == len(sizings) == len(back_names) == len(sleeve_names)):\n        raise ValueError(\"Mismatch in items input!\")\n\n    # List to store number of personalisations\n    n_personalisations = [_np.nan] * 5\n\n    for n in range(len(items)):\n        if isinstance(items[n], str):\n            n_personalisations[n] = 0\n\n    for n in range(len(back_names)):\n        if isinstance(back_names[n], str):\n            n_personalisations[n] += 1\n\n    for n in range(len(sleeve_names)):\n        if isinstance(sleeve_names[n], str):\n            n_personalisations[n] += 1\n\n    self.n_personalisations = n_personalisations\n</code></pre>"},{"location":"reference/read_orders/#plkit.read_orders.Order.identify_products","title":"identify_products","text":"<pre><code>identify_products() -&gt; None\n</code></pre> <p>Assign a product name to each item in the order</p> Source code in <code>plkit/read_orders.py</code> <pre><code>def identify_products(self) -&gt; None:\n    \"\"\"\n    Assign a product name to each item in the order\n    \"\"\"\n\n    products = [_np.nan] * len(self.items)\n\n    for n in range(len(self.items)):\n        item = self.items[n]\n\n        if isinstance(item, str):\n            # Extract how many personalisations an item has\n            n_personal = self.n_personalisations[n]\n\n            if n_personal == 0:\n                products[n] = item\n\n            if n_personal == 1:\n                products[n] = item + \" - 1 Personalisation\"\n\n            if n_personal == 2:\n                products[n] = item + \" - 2 Personalisations\"\n\n    # Replace 'Green' with 'Forest'\n    products = [\n        product.replace(\"Green\", \"Forest\") if isinstance(product, str) else product\n        for product in products\n    ]\n\n    # Move colour to the end of the product name\n    for i, product in enumerate(products):\n        if isinstance(product, str):\n            for colour in [\"Forest\", \"Navy\"]:\n                if f\"({colour})\" in product:\n                    products[i] = (\n                        product.replace(f\"({colour})\", \"\").strip() + f\" ({colour})\"\n                    )\n\n    # Clean up double spacing in product name\n    self.products = [\n        product.replace(\"  \", \" \").strip() if isinstance(product, str) else product\n        for product in products\n    ]\n</code></pre>"},{"location":"reference/read_orders/#plkit.read_orders.extract_orders","title":"extract_orders","text":"<pre><code>extract_orders(\n    filename: str = \"responses.xlsx\",\n) -&gt; DataFrame\n</code></pre> <p>Read in the order response form as a pandas DataFrame.</p>"},{"location":"reference/read_orders/#plkit.read_orders.extract_orders--parameters","title":"Parameters","text":"<p>filename : str, optional     The name of the responses form saved from Microsoft forms</p>"},{"location":"reference/read_orders/#plkit.read_orders.extract_orders--returns","title":"Returns","text":"<p>df_orders : pd.DataFrame     The order details converted to a pandas DataFrame</p> Source code in <code>plkit/read_orders.py</code> <pre><code>def extract_orders(filename: str = \"responses.xlsx\") -&gt; _pd.DataFrame:\n    \"\"\"\n    Read in the order response form as a pandas DataFrame.\n\n    Parameters\n    ----------\n    filename : str, optional\n        The name of the responses form saved from Microsoft forms\n\n    Returns\n    -------\n    df_orders : pd.DataFrame\n        The order details converted to a pandas DataFrame\n    \"\"\"\n\n    if not filename.endswith(\".xlsx\"):\n        raise ValueError(\"Input must be an Excel File\")\n\n    if not _os.path.isfile(filename):\n        raise FileNotFoundError(f\"File {filename} does not exist\")\n\n    try:\n        df_orders = _pd.read_excel(filename)\n    except _pd.errors.EmptyDataError as e:\n        raise _pd.errors.EmptyDataError(f\"The file {filename} is empty\") from e\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\") from e\n\n    # Clean hidden characters\n    df_orders['Name'] = df_orders['Name'].apply(_clean_string)\n    df_orders['Email'] = df_orders['Email'].apply(_clean_string)\n\n    for number in ['First', 'Second', 'Third', 'Fourth', 'Fifth']:\n        column_name = f'{number} kit item'\n        df_orders[column_name] = df_orders[column_name].apply(_clean_string)\n        column_name = f'{number} item - name personalisation for back (optional)'\n        df_orders[column_name] = df_orders[column_name].apply(_clean_string)\n        column_name = (f'{number} item - personalisation for initials (optional, '\n        'max two letters)')\n        df_orders[column_name] = df_orders[column_name].apply(_clean_string)\n\n    for number in ['first', 'second', 'third', 'fourth', 'fifth']:\n        column_name = (f\"Sizing for {number} kit item (note that for women's tee, \"\n        \"XS=size 6, S=size 8, ... , 4XL=20)\"\n        )\n        df_orders[column_name] = df_orders[column_name].apply(_clean_string)\n\n    return df_orders\n</code></pre>"},{"location":"reference/read_orders/#plkit.read_orders.read_order","title":"read_order","text":"<pre><code>read_order(\n    df_orders: DataFrame, name: str, email: str = None\n)\n</code></pre> <p>Obtain the order information for a specific person</p>"},{"location":"reference/read_orders/#plkit.read_orders.read_order--parameters","title":"Parameters","text":"<p>df_orders: pd.DataFrame     The pandas DataFrame containing all the order information name : str     The name of the person placing the order email : str, optional     The email address of the person placing the order</p>"},{"location":"reference/read_orders/#plkit.read_orders.read_order--returns","title":"Returns","text":"<p>order : class     Instance of the Order class for the specified name</p> Source code in <code>plkit/read_orders.py</code> <pre><code>def read_order(df_orders: _pd.DataFrame, name: str, email: str = None):\n    \"\"\"\n    Obtain the order information for a specific person\n\n    Parameters\n    ----------\n    df_orders: pd.DataFrame\n        The pandas DataFrame containing all the order information\n    name : str\n        The name of the person placing the order\n    email : str, optional\n        The email address of the person placing the order\n\n    Returns\n    -------\n    order : class\n        Instance of the Order class for the specified name\n    \"\"\"\n    name = name.strip()\n\n    # Check that names column exists\n    if \"Name\" not in df_orders.columns:\n        raise LookupError(\"Name column not found in input DataFrame\")\n    else:\n        names = df_orders[\"Name\"].to_list()\n\n    # Check that email column exists\n    if \"Email\" not in df_orders.columns:\n        raise LookupError(\"Email column not found in input DataFrame\")\n\n    # Extract email if not specified\n    if isinstance(email, str):\n        email = email.strip()\n    else:\n        email = df_orders.loc[df_orders[\"Name\"] == name, \"Email\"].iloc[0]\n\n    name_count = names.count(name)\n\n    if name_count == 0:\n        raise LookupError(f\"Name {name} not found!\")\n    elif name_count == 1:\n        idx = df_orders[\n            df_orders[\"Name\"] == name\n        ].index  # Only use email unless if are two identical names\n    else:\n        idx = df_orders[\n            (df_orders[\"Name\"] == name) &amp; (df_orders[\"Email\"] == email)\n        ].index\n\n    # Initialise class\n    order_info = Order(\n        email=email,\n        name=name,\n        items=_extract_items(df_orders, idx),\n        sizings=_extract_sizings(df_orders, idx),\n        back_names=_extract_back_names(df_orders, idx),\n        sleeve_names=_extract_sleeve_names(df_orders, idx),\n    )\n\n    return order_info\n</code></pre>"},{"location":"reference/validate/","title":"validate","text":""},{"location":"reference/validate/#plkit.validate","title":"validate","text":"<p>Modules:</p> <ul> <li> <code>tests</code>           \u2013            <p>Validation testing that all orders have been included</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>assert_order_count</code>             \u2013              <p>Assert that the item count in the DataFrame of</p> </li> <li> <code>assert_back_personalisations</code>             \u2013              <p>Assert that the back name personalisations count in the</p> </li> <li> <code>assert_sleeve_personalisations</code>             \u2013              <p>Assert that the sleeve name personalisations count in the</p> </li> </ul>"},{"location":"reference/validate/#plkit.validate.assert_order_count","title":"assert_order_count","text":"<pre><code>assert_order_count(\n    df_orders: DataFrame, df_products: DataFrame\n) -&gt; None\n</code></pre> <p>Assert that the item count in the DataFrame of products to order matches the total number of items in the initial order.</p>"},{"location":"reference/validate/#plkit.validate.assert_order_count--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame df_products: _pd.DataFrame     Full order details for every product,     completed with the orders contained in df_orders</p>"},{"location":"reference/validate/#plkit.validate.assert_order_count--returns","title":"Returns","text":"<p>None</p> Source code in <code>plkit/validate/tests.py</code> <pre><code>def assert_order_count(df_orders: _pd.DataFrame, df_products: _pd.DataFrame) -&gt; None:\n    \"\"\"\n    Assert that the item count in the DataFrame of\n    products to order matches\n    the total number of items in the initial order.\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n    df_products: _pd.DataFrame\n        Full order details for every product,\n        completed with the orders contained in df_orders\n\n    Returns\n    -------\n    None\n    \"\"\"\n    initial_count = int(_count_initial_order(df_orders))\n    processed_count = int(_count_processed_order(df_products))\n\n    assert initial_count == processed_count\n</code></pre>"},{"location":"reference/validate/#plkit.validate.assert_back_personalisations","title":"assert_back_personalisations","text":"<pre><code>assert_back_personalisations(\n    df_orders: DataFrame, df_personal: DataFrame\n) -&gt; None\n</code></pre> <p>Assert that the back name personalisations count in the DataFrame of products to order matches the total number of personalisations in the initial order.</p>"},{"location":"reference/validate/#plkit.validate.assert_back_personalisations--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame df_personal: __pd.DataFrame     Full personalisation details for every product,     completed with the orders contained in df_orders</p>"},{"location":"reference/validate/#plkit.validate.assert_back_personalisations--returns","title":"Returns","text":"<p>None</p> Source code in <code>plkit/validate/tests.py</code> <pre><code>def assert_back_personalisations(\n    df_orders: _pd.DataFrame, df_personal: _pd.DataFrame\n) -&gt; None:\n    \"\"\"\n    Assert that the back name personalisations count in the\n    DataFrame of products to order matches\n    the total number of personalisations in the initial order.\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n    df_personal: __pd.DataFrame\n        Full personalisation details for every product,\n        completed with the orders contained in df_orders\n\n    Returns\n    -------\n    None\n    \"\"\"\n    initial_count = _count_initial_back_personalisations(df_orders)\n    processed_count = _count_processed_back_personalisations(df_personal)\n\n    assert initial_count == processed_count\n</code></pre>"},{"location":"reference/validate/#plkit.validate.assert_sleeve_personalisations","title":"assert_sleeve_personalisations","text":"<pre><code>assert_sleeve_personalisations(\n    df_orders: DataFrame, df_personal: DataFrame\n) -&gt; None\n</code></pre> <p>Assert that the sleeve name personalisations count in the DataFrame of products to order matches the total number of personalisations in the initial order.</p>"},{"location":"reference/validate/#plkit.validate.assert_sleeve_personalisations--parameters","title":"Parameters","text":"<p>df_orders: _pd.DataFrame     The order details converted to a pandas DataFrame df_personal: __pd.DataFrame     Full personalisation details for every product,     completed with the orders contained in df_orders</p>"},{"location":"reference/validate/#plkit.validate.assert_sleeve_personalisations--returns","title":"Returns","text":"<p>None</p> Source code in <code>plkit/validate/tests.py</code> <pre><code>def assert_sleeve_personalisations(\n    df_orders: _pd.DataFrame, df_personal: _pd.DataFrame\n) -&gt; None:\n    \"\"\"\n    Assert that the sleeve name personalisations count in the\n    DataFrame of products to order matches\n    the total number of personalisations in the initial order.\n\n    Parameters\n    ----------\n    df_orders: _pd.DataFrame\n        The order details converted to a pandas DataFrame\n    df_personal: __pd.DataFrame\n        Full personalisation details for every product,\n        completed with the orders contained in df_orders\n\n    Returns\n    -------\n    None\n    \"\"\"\n    initial_count = _count_initial_sleeve_personalisations(df_orders)\n    processed_count = _count_processed_sleeve_personalisations(df_personal)\n\n    assert initial_count == processed_count\n</code></pre>"}]}